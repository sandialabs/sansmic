[project]
name = "sansmic"
description = "Sandia solution mining modeling software"
readme = "README.md"
requires-python = ">=3.9"
version = "1.0.3"
authors = [
    { name = "National Technology & Engineering Solutions of Sandia, LLC (NTESS)" },
    { name = "SANSMIC Authors (see AUTHORS.md)" },
]
maintainers = [{ name = "David Hart", email = "david.hart@sandia.gov" }]
dependencies = ["numpy", "pandas", 'tomli; python_version < "3.11"', "click"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    'Intended Audience :: End Users/Desktop',
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering",
]

[project.optional-dependencies]
formats = ['h5py', 'openpyxl', 'tabulate', 'pyyaml', 'lasio']
examples = ['nbmake', 'matplotlib']
tests = ['pytest', 'pytest-cov']
devel = [
    'pyyaml',
    'pre-commit',
    'pyproject_hooks',
    'pytest',
    'pytest-cov',
    'black',
    'pybind11',
    'nbmake',
    'matplotlib',
    'python-semantic-release',
]
docs = [
    'Sphinx',
    'pydata-sphinx-theme',
    'sphinx_design',
    'sphinxcontrib-bibtex',
    'breathe',
    'exhale',
    'sphinx-click',
]

[project.urls]
Documentation = "https://sandialabs.github.io/sansmic"
Issues = "https://github.com/sandialabs/sansmic/issues"
Repository = "https://github.com/sandialabs/sansmic.git"

[project.scripts]
sansmic = "sansmic.app:run"
sansmic-convert = "sansmic.app:convert"

[build-system]
requires = ["setuptools", "pybind11"]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
skip = ["cp313-*", "pp*", "*-win32", "*-manylinux_i686", "*-musllinux*"]
test-extras = "tests,examples,formats"
test-command = "pytest {project}/tests"

[tool.setuptools.package-data]
"sansmic" = ["src/python/sansmic/*.pyd"]

[tool.setuptools.package-dir]
sansmic = "src/python/sansmic"

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "release: {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"

version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "setup.py:__version__",
    "src/python/sansmic/_version.py:__version__",
    "docs/conf.py:version",
]

[tool.semantic_release.branches.main]
match = "(main|master|staging)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = ["build", "ci", "chore", "^Bump", "release"]

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    # Non-source code changes (no change to version; omit from CHANGELOG by default)
    "build", # Changes to build system or external dependencies (omit from CHANGELOG - manually add if needed)
    "ci",    # Changes to CI configuration files and scripts (omit from CHANGELOG - manually add if needed)
    "chore", # Other changes that don't touch the source code (omit from CHANGELOG - manually add if needed)
    # Changes to test suites (no change to version; include in CHANGELOG by default)
    "test", # Adding missing tests or correcting existing tests (does not change package code)
    # Changes to source code (possible change to version; include in CHANGELOG by default)
    "fix",      # A bug fix (a patch-level version change)
    "perf",     # A code change that improves performance (at-least patch-level, possibly minor version change)
    "feat",     # A new feature or functionality (at-least minor, possibly major version change)
    "refactor", # A change that does not add a feature nor fix a bug (could be major, minor or patch)
    "docs",     # Documentation-only changes within the source code (no version level change)
    "style",    # A code that does not change meaning of the code (no version level change)
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false
